@using DataAccessBlazor;
@using DataAccessBlazor.Pages.PizzaComponents;
@using DataAccessBlazor.Services;
@using Newtonsoft.Json
@using System.Text

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject PizzaSalesState SalesState
@inject OrderState OrderState
@inject OrderService OrderService

@page "/"


<div class="main">

    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
            @if (OrderState.ShowingConfigureDialog)
            {
                <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
                                      OnCancel="OrderState.CancelConfigurePizzaDialog"
                                      OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        Console.WriteLine(order);
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <div class="cart-item">
                    <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                    <ul>
                        <li>@configuredPizza.Id</li>
                        <li>@configuredPizza.OrderId</li>
                        <li>@configuredPizza.SpecialId</li>
                        <li>@configuredPizza.Toppings.Count</li>
                        @foreach (var topping in configuredPizza.Toppings)
                        {
                            <li>+ @topping.Topping?.Name</li>

                        }
                    </ul>
                    <div class="item-price">
                        @configuredPizza.GetFormattedTotalPrice()
                    </div>
                    <a @onclick="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(order.Pizzas.Count == 0)" @onclick="CreateOrder">
            Order >
        </button>
    </div>
</div>

@code {




    [Parameter, EditorRequired] public Pizza Pizza { get; set; } = new();

    List<PizzaSpecial> specials = new();
    Pizza? configuringPizza;

    public OrderState orderState { get; set; }
    Order order => OrderState.Order;

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
    }

    private async Task CreateOrder()
    {
        try
        {
            var createdOrder = await OrderService.PostOrder(OrderState);
            // Manejar la respuesta, por ejemplo, navegar a una página de confirmación
        }
        catch (Exception ex)
        {
            // Manejo de errores
            Console.WriteLine("Error al crear la orden: " + ex.Message);
        }
    }

    private PizzaSalesState state { get; set; } = new();

    private void IncrementSales()
    {
        SalesState.PizzasSoldToday++;
    }
}