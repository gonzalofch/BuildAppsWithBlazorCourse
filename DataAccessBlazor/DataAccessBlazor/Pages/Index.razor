@using DataAccessBlazor;
@using DataAccessBlazor.Pages.PizzaComponents;
@using DataAccessBlazor.Services;
@using System.Text
@using Microsoft.AspNetCore.WebUtilities


@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject PizzaSalesState SalesState
@inject OrderState OrderState

@page "/"
@page "/pizzas"
@*Pruebas de Navigation Manager con lo que devuelven*@


<ul>
    <p>I want to order a: @PizzaName</p>

    <p>I want to add this topping: @ToppingName</p>
    <br />
    <li>@(currentUri)</li>
    <li>@(baseUri)</li>
    <li>@(absoluteUri)</li>
    <li>@(relativePath)</li>
    <button class="btn" @onclick="Navigate">
        To Another Page >
    </button>
    <br />
    <button class="btn" @onclick="NavigateToPaymentPage">
        To Payment Page >
    </button>

    <NavLink href=@HomePageURI Match="NavLinkMatch.All">Home Page</NavLink>
    <NavLink href="/buypizza" Match="NavLinkMatch.All">Pizza Payment Page</NavLink>
    <NavLink href="/orders" Match="NavLinkMatch.All">Orders Page</NavLink>
    <NavLink href="/ukbirthdaypizza" Match="NavLinkMatch.All">UK birthday pizza</NavLink>
</ul>
@* <a href="@HomePageURI">HomePageLink</a> *@



<div class="main">

    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
            @if (OrderState.ShowingConfigureDialog)
            {
                <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
                                      OnCancel="OrderState.CancelConfigurePizzaDialog"
                                      OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        Console.WriteLine(order);
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <div class="cart-item">
                    <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                    <ul>
                        @* <li>@configuredPizza.Id</li>
                <li>@configuredPizza.OrderId</li>
                <li>@configuredPizza.SpecialId</li>
                <li>@configuredPizza.Toppings.Count</li> *@
                        @foreach (var topping in configuredPizza.Toppings)
                        {
                            <li>+ @topping.Topping?.Name</li>

                        }
                    </ul>
                    <div class="item-price">
                        @configuredPizza.GetFormattedTotalPrice()
                    </div>
                    <a @onclick="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(order.Pizzas.Count == 0)">
            Order >
        </button>
    </div>
</div>

@code {
   
    [Parameter, EditorRequired] public Pizza Pizza { get; set; } = new();

    List<PizzaSpecial> specials = new();
    Pizza? configuringPizza;

    public OrderState orderState { get; set; }
    Order order => OrderState.Order;

    /*
     * With NavigationManager we can obtain all these values
     * The current full URI, such as http://www.blablablazor.com/pizzas/margherita?extratopping=pineapple.
     *     The base URI, such as http://www.blablablazor.com/.
     *     The base relative path, such as pizzas/margherita.
     *     The query string, such as ?extratopping=pineapple.
     */

    private string currentUri;
    private string baseUri;
    private string absoluteUri;
    private string relativePath;

    
    private void Navigate()
    {
        NavigationManager.NavigateTo("/another-page");
    }

    private void NavigateToPaymentPage()
    {
        NavigationManager.NavigateTo("buypizza");
    }

    [Parameter]
    public string PizzaName { get; set; }
    private string ToppingName { get; set; }
    public string HomePageURI { get; set; }

    protected override void OnInitialized()
    {
        HomePageURI = NavigationManager.BaseUri;

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("extratopping", out var extraTopping))
        {
            ToppingName = System.Convert.ToString(extraTopping);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        currentUri = NavigationManager.Uri;
        baseUri = NavigationManager.BaseUri;
        absoluteUri = NavigationManager.ToAbsoluteUri("/another-page").ToString();
        relativePath = NavigationManager.ToBaseRelativePath("https://localhost:7056/another-page");

        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
    }

    private PizzaSalesState state { get; set; } = new();

    private void IncrementSales()
    {
        SalesState.PizzasSoldToday++;
    }
}